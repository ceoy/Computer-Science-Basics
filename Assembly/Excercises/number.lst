     1                                  section .data
     2 00000000 5331747269326E6720-         iString db "S1tri2ng  0b3lbalb$"
     2 00000009 203062336C62616C62-
     2 00000012 24                 
     3 00000013 202020202020202020-         oString db "                   ", 0Ah ; 0Ah = end of string 
     3 0000001C 202020202020202020-
     3 00000025 200A               
     4                                      
     5                                  section .text
     6                                      global _start
     7                                  _start:
     8 00000000 B8[00000000]                mov eax, iString ; put start of string into eax
     9 00000005 BB[13000000]                mov ebx, oString ; put the start of the outputstrig into ebx
    10                                  loop:
    11 0000000A FFC2                        inc edx
    12 0000000C 67803824                    cmp byte [eax], '$' ; check if we reached the end ($)
    13 00000010 741E                        jz finished         ; equals, so we are done
    14                                      
    15 00000012 67803830                    cmp byte [eax], '0'  ; copare the value (byte) stored in eax to '0'
    16 00000016 7212                        jb continueLoop ;
    17                                      
    18 00000018 67803839                    cmp byte [eax], '9'  ; compare the value (byte) stored in eax to '9'
    19 0000001C 770C                        ja continueLoop
    20                                      
    21                                  isNumber:   
    22                                      ; cl works, dl doesn't, why?
    23                                      ; cl = counter register
    24                                      ; dl = data register
    25                                      ; btw, this might be the answer, but i dont know
    26 0000001E 678A08                      mov cl, [eax]     ; move value at eax into cl
    27 00000021 67880B                      mov [ebx], cl     ; move value of cl into ebx
    28 00000024 FFC3                        inc ebx
    29 00000026 FFC0                        inc eax
    30 00000028 EBE0                        jmp loop
    31                                  
    32                                  continueLoop:
    33 0000002A FFC0                        inc eax
    34 0000002C FFC3                        inc ebx
    35 0000002E EBDA                        jmp loop
    36                                      
    37                                  finished:
    38 00000030 FFC2                        inc edx             ; increment for 0Ah
    39 00000032 B804000000                  mov eax, 4          ; sys write
    40 00000037 BB01000000                  mov ebx, 1          ; standard output
    41 0000003C B9[13000000]                mov ecx, oString    ; start string
    42 00000041 CD80                        int 80H             ; kernel call
    43                                      
    44 00000043 B804000000                  mov eax, 4 ; the stupid shit
    45 00000048 B801000000                  mov eax, 1 ; code for exiting
    46 0000004D BB00000000                  mov ebx, 0 ; return code
    47 00000052 CD80                        int 80H    ; kernel call
